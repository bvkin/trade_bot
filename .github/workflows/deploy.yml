name: Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.11.4
      uses: actions/setup-python@v2
      with:
        python-version: '3.11.4'

    - name: Install make
      run: sudo apt-get install -y make

    - name: Install Ta-Lib
      run: |
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz \
        && ls \
        && tar -xzf ta-lib-0.4.0-src.tar.gz \
        && cd ta-lib \
        && ./configure --prefix=/usr \
        && make \
        && make install \
        && cd .. \
        && rm -rf ta-lib

    - name: Install dependencies
      run: pip install --no-cache-dir . --upgrade pip

    - name: Run tests
      run: make test

  build-push-and-deploy:
      runs-on: ubuntu-latest
      needs: test
      if: github.ref == 'refs/heads/main'
      steps:
        - uses: actions/checkout@v2

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v3
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
          with:
            mask-password: true

        - name: Get Commit Hash
          id: commit-hash
          run: |
            echo "commit-hash=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_OUTPUT

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v2
          with:
            version: latest
            driver-opts: image=moby/buildkit:latest

        - name: Build and push Docker image
          uses: docker/build-push-action@v4
          with:
            context: .
            file: ./docker/Dockerfile
            tags: ${{ steps.login-ecr.outputs.registry }}/trade_bot:${{ steps.commit-hash.outputs.commit-hash }},${{ steps.login-ecr.outputs.registry }}/trade_bot:latest
            push: true
            pull: true
            cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/trade_bot:dockercache
            cache-to: image-manifest=true,type=registry,ref=${{ steps.login-ecr.outputs.registry }}/trade_bot:dockercache

        - name: Deploy ECS Service
          run: |
            aws ecs update-service --region $AWS_REGION --force-new-deployment --cluster $ECS_CLUSTER_NAME  --service $ECS_SERVICE_NAME
          env:
            AWS_REGION: us-east-1
            ECS_CLUSTER_NAME: trade_bot
            ECS_SERVICE_NAME: trade_bot
